import { ChangeDetectorRef, Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';

import { Observable, Subscription, from, forkJoin, of } from 'rxjs';
import { concatMap, finalize, map, switchMap, tap, toArray } from 'rxjs/operators';
import { throwError } from 'rxjs';
import { catchError, mergeMap } from 'rxjs/operators';

import { AngularFireStorage, AngularFireStorageReference } from '@angular/fire/compat/storage';
import { ActivatedRoute, Route, Router } from '@angular/router';
import { getBlob, getDownloadURL, ref, getStorage, getBytes} from "@angular/fire/storage";
import { AngularFirestore } from '@angular/fire/compat/firestore';

import { HttpClient } from '@angular/common/http';
import { FormControl } from '@angular/forms';
import { environment } from 'src/environments/environment';
import { MatSnackBar } from '@angular/material/snack-bar';
import { MatDialogRef } from '@angular/material/dialog';

@Component({
  selector: 'bk-user-create-message',
  templateUrl: './user-create-message.component.html',
  styleUrls: ['./user-create-message.component.scss'],
  encapsulation: ViewEncapsulation.None
})
export class UserCreateMessageComponent implements OnInit {

  messageText: FormControl = new FormControl(null)
  message:any = {}
  id: any;
  img: any;
  bot: any;
  constructor(
    public dialogRef: MatDialogRef<UserCreateMessageComponent>,
    private snackBar: MatSnackBar,
    public firestore: AngularFirestore,
    private route: ActivatedRoute,
    private http: HttpClient
  ) {
    // this.bot = new TelegramBot('6759998817:AAFqIvCfOKGi-mKAZ8xksqFWQxBmT4eZ_ts', { polling: true });

   
  }
  ngOnInit(): void {
    this.id = this.route.snapshot.params['id'];
    
  }

  addImage(input: any): void {
    input.value = null;
    input.click();
  }

  onFileSelected(event: any): void {
    if(!this.message?.medias) {
      this.message.medias = [];
    }
    this.img = event.target.files[0];
    const payload = {
      type: event.target.files[0].type,
      url: event.target.files[0],
      viewUrl: URL.createObjectURL(event.target.files[0])
    }

    this.message.medias.push(payload)
  }

  addChannelLink(): void {
    const link = '\n\n<a href="https://t.me/buk_lviv_news">[BUK | –õ—å–≤—ñ–≤ –ù–æ–≤–∏–Ω–∏]</a>';
    this.messageText.setValue(this.messageText.value + link);
  }

  copyPaternText(text: any): string {

    // const patternText = `–£—è–≤–∏ —â–æ —Ç–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä –Ω–æ–≤–∏–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É –∑ –≤–µ–ª–∏–∫–∏–º —Å—Ç–∞–∂–æ–º –ø—Ä–æ—Ä–µ–¥–∞–≥—É–π –º—ñ–π —Ç–µ–∫—Å—Ç –Ω–∞ –ø–æ—á–∞—Ç–∫—É –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–¥–∞–π –≤ —Ç–µ–≥ <b> text</b> –¥–∞–ª—ñ –æ—Å–Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç —Ç–∞–∫–æ–∂ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π AIDA —ñ –¥–æ–¥–∞–≤–∞–π —Å–º–∞–π–ª–∏–∫–∏ —ñ –≤–∏–¥–∞–ª—è–π –±—É–¥—å —è–∫—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–∏ —Ç–∏–ø—É https://t.me/ ,–∞ —è–∫—â–æ —î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —è–∫–∏–π —Å–∞–π—Ç —Ç–æ–¥—ñ –¥–æ–¥–∞–≤–∞–π –π–æ–≥–æ –æ—Å—å —Ç–∞–∫–∏–º —á–∏–Ω–æ–º a href=URL">Text</a> —ñ –≤ –∫—ñ–Ω—Ü—ñ –¥–æ–¥–∞–π —Ü–µ <a href="https://t.me/buk_lviv_news">[BUK | –õ—å–≤—ñ–≤ –ù–æ–≤–∏–Ω–∏]</a> —Ç–µ–∫—Å—Ç –≤—ñ–¥–ø–∏—à–∏ –º–µ–Ω—ñ –ª–∏—à–µ —Ä–µ–¥–∞–≥–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç : ${text}`;
    const redactor = '1.–£—è–≤–∏ —â–æ —Ç–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä –Ω–æ–≤–∏–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É –∑ –≤–µ–ª–∏–∫–∏–º —Å—Ç–∞–∂–æ–º –ø—Ä–æ—Ä–µ–¥–∞–≥—É–π –º—ñ–π —Ç–µ–∫—Å—Ç –∑—Ä–æ–±–∏ —â–æ–± –≤—ñ–Ω –≤—ñ–¥—Ä—ñ–∑–Ω—è–≤—Å—è –≤—ñ–¥ –æ—Ä–∏–≥—ñ–Ω–∞–ª—É \n' +
      '1.–ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–∞—î –±—É—Ç–∏ –±–≥–æ—Ä–Ω—É—Ç–∏–π –≤ <b> </b> \n' +
      '2.–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π AIDA –¥–ª—è —Ç—Ä–∏–≥–µ—Ä—É–≤–∞–Ω–Ω—è –ª—é–¥–∏–Ω–∏ —è–∫–∞ –±—É–¥–µ —Ü–µ —á–∏—Ç–∞—Ç–∏\n' +
      '4.–î–æ–¥–∞–π –Ω–æ–≤—ñ —Å–º–∞–π–ª–∏–∫–∏ —è–∫—ñ –ø—ñ–¥—Ö–æ–¥—è—Ç—å –¥–æ —Ü—å–æ–≥–æ —Ç–µ–∫—Å—Ç—É\n' +
      '5.–í—ñ–¥—Ä–µ–¥–∞–≥—É–π —Ç–µ–∫—Å—Ç —Ç–∞–∫ —â–æ–± —Ç–µ–∫—Å—Ç –Ω–µ –±—É–≤ –ø–æ—Ö–æ–∂–∏–π –Ω–∞ —Ü–µ–π —â–æ —è –Ω–∞–¥–∞—é \n' +
      '6.–í–∏–¥–∞–ª—è–π –±—É–¥—å —è–∫—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–∏ —Ç–∏–ø—É https://t.me/ —ñ —Ç–µ–∫—Å—Ç —è–∫–∏–π –π–æ–º—É –Ω–∞–ª–µ–∂–∏—Ç—å\n' +
      '7.–Ø–∫—â–æ —î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —è–∫–∏–π —Å–∞–π—Ç —Ç–æ–¥—ñ –¥–æ–¥–∞–≤–∞–π –π–æ–≥–æ –æ—Å—å —Ç–∞–∫–∏–º —á–∏–Ω–æ–º <a href=URL">Text</a>\n' +
      '8.–í –∫—ñ–Ω—Ü—ñ –¥–æ–¥–∞–π —Ü–µ <a href="https://t.me/+8Rvm40tRgxAxYTJi">[BUK | –õ—å–≤—ñ–≤ –ù–æ–≤–∏–Ω–∏]</a>\n' +
      '9.–í—ñ–¥–¥–∞–π –º–µ–Ω—ñ –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç\n' +
      '10.–í —Ç–µ–∫—Å—Ç—ñ –Ω–µ –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ –±—ñ–ª—å—à–µ –Ω—ñ–∂ 500 —Å–∏–º–≤–æ–ª—ñ–≤\n' +
      '11. –Ω–µ –ø–æ–≤–∏–Ω–Ω–∞ –≤—Ç—Ä–∞—á–∞—Ç–∏—Å—å —Å—É—Ç—å —ñ —Ç–µ–∫—Å—Ç –º–∞—î –±—É—Ç–∏ —è–∫ –≤ –Ω–∞–π–∫—Ä–∞—â–∏—Ö –Ω–æ–≤–∏–Ω–∞—Ö\n' +
      `–¢–µ–∫—Å—Ç:\n ${text}`

    return redactor;
  }

  private botToken = environment.botToken;
  isSending = false;

  sendMessageAction(type: any): void {
    if (type === 'TEST') {
      const chatId = null;
      this.sendMessage(chatId)
    } else {
      const chatId = null;
      this.sendMessage(chatId)
    }
  }


  sendMessage(chatId: any): any {
    this.isSending = true;

    let apiUrl = `https://api.telegram.org/bot${this.botToken}/sendPhoto`;


    let payload: any = {}


    console.log('payload.schedule_date', payload.schedule_date);

    const formData: FormData = new FormData();


    if (this.message?.medias?.length === 1) {


      if (this.message.medias[0].type === 'video' || this.message.medias[0].type === 'video/mp4') {
        apiUrl = `https://api.telegram.org/bot${this.botToken}/sendVideo`;

        // formData.append('chat_id', (chatId as any));
        formData.append('caption', this.messageText.value ? this.messageText.value : '');
        formData.append('video', this.message.medias[0].url);
        formData.append('parse_mode', 'html');

      } else {
        apiUrl = `https://api.telegram.org/bot${this.botToken}/sendPhoto`;

        // formData.append('chat_id', (chatId as any));
        formData.append('caption', this.messageText.value ? this.messageText.value : '');
        formData.append('photo', this.message.medias[0].url);
        formData.append('parse_mode', 'html');
      }



    } else if (this.message?.medias?.length > 1) {
      apiUrl = `https://api.telegram.org/bot${this.botToken}/sendMediaGroup`;
      const medias = this.prepareMedia();
      medias[0].caption = this.messageText.value ? this.messageText.value : '',
      medias[0].parse_mode = 'html'
      // formData.append('chat_id', ( chatId as any));
      formData.append('media',  JSON.stringify(medias)); 

      this.message.medias.forEach((media:any, index:number) => {
        formData.append(`photo${index}`, media.url);
      }); 
     

    } else {
      apiUrl = `https://api.telegram.org/bot${this.botToken}/sendMessage`;

      // formData.append('chat_id', ( chatId as any));
      formData.append('text', this.messageText.value ? this.messageText.value : '')
      formData.append('parse_mode', 'html');



    }

    const reply_markup = {
      inline_keyboard : [
        [{
          text: '–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ì–æ–¥–∏–Ω—É –¢–£–¢ üïí',
          url: 'https://t.me/+nMxhI7detocxNTQy'
        }]
      ]
    }
    
    formData.append('reply_markup', JSON.stringify(reply_markup));


    this.dialogRef.close({api: apiUrl,formData:formData } )

    // this.http.post(apiUrl, formData).pipe(
    //   catchError((err) => {
    //     console.log(111, err);

    //     this.snackBar.open(err.error?.description);
    //     this.isSending = false;
    //     return of()
    //   })
    // ).subscribe((data: any) => {
    //   if (data) {
    //     console.log(11231, data);
    //     this.isSending = false;
    //     this.snackBar.open('–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ')
    //   }

    // });
  }

  private prepareMedia(): any {
    let medias:any = [];
    this.message.medias.forEach((media: any, index: number) => {
      if (typeof media.url === 'string' || media.url instanceof String) {
        medias.push({ type: media.type, media: media.url, isFile:false})
      } else {
        const mediaType = this.checkIfPhoto(media.type);
        medias.push({ type: mediaType, media: `attach://photo${index}`, isFile:true  })
       
      }
     

    
    })

    return medias
  }


  removeImage(media: any): void {
    const index = this.message.medias.findIndex((item: any) => item.url === media.url);

    this.message.medias.splice(index, 1)
  }

  private checkIfPhoto(mediaType: string): string {
    const listPhotoTypes = ['image/jpeg','image/png', 'image/svg+xml', 'image/tiff'];
    return !!listPhotoTypes.find((type: string) => type === mediaType) ? 'photo': 'video'
  }

}

